name: Deploy to Libaraease API
run-name: Deploy to Libaraease API @${{ github.actor }}

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths-ignore:      
      - '**.md'
      - 'docs/**'
      - '.github/**/*.md'

permissions:
  contents: read
  id-token: write 

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true 

jobs:
  build-and-push:
    name: Build and Push Image
    runs-on: ubuntu-latest
    timeout-minutes: 15  # Reduced from 30 as it's usually sufficient

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.23.0'
          cache: true    # Enable Go module caching

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          buildkitd-flags: --debug

      - name: Build and Push Image
        uses: docker/build-push-action@v5    # Using the official Docker build-push action
        with:
          context: .
          push: true
          platforms: linux/amd64
          tags: ${{ steps.login-ecr.outputs.registry }}/${{ secrets.REPOSITORY }}:${{ vars.PROD_IMAGE_TAG }}
          cache-from: type=gha    # Using GitHub Actions cache
          cache-to: type=gha,mode=max

  deploy-api-service:
    name: Deploy to API Service
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Deploy to Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.PROD_SERVER_IP }}
          username: ${{ secrets.PROD_SERVER_USERNAME }}
          port: ${{ secrets.PORT }}
          key: ${{ secrets.PROD_SERVER_SSH_KEY }}
          script: |
            cd /home/ubuntu/deploy
            bash deploy.sh